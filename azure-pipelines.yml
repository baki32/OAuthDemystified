# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- master

#pool:
#  vmImage: 'windows-2019'

#steps:
#- task: DotNetCoreInstaller@0
#  inputs:
#    version: '3.0.100-preview5-011568'
# Starter pipeline
#- script: dotnet restore ./OAuthDemystifiedTT/OAuthDemystifiedTT.csproj
#- script: dotnet restore ./OauthHandler/OauthHandler.csproj
#- script: dotnet restore ./WebApitest/WebApitest.csproj
#- script: dotnet build OAuthDemystifiedTT.sln --configuration Release
#- task: PublishBuildArtifacts@1


pool:
  name: Hosted Ubuntu 1604
steps:

- task: DockerCompose@0
  displayName: 'Run services'
  inputs:
    azureSubscription: Azure
    azureContainerRegistry: '{"loginServer":"ibmkettkubernetesacr.azurecr.io", "id" : "/subscriptions/abbfdd0a-d144-41f3-becb-126b9834692a/resourceGroups/MSTTKubernetes/providers/Microsoft.ContainerRegistry/registries/IbmKeTTKubernetesACR"}'
    dockerComposeFile: 'docker-compose.ci.build.yml'
    action: 'Run services'
    detached: false

- task: DockerCompose@0
  displayName: 'Build services'
  inputs:
    azureSubscription: Azure
    azureContainerRegistry: '{"loginServer":"ibmkettkubernetesacr.azurecr.io", "id" : "/subscriptions/abbfdd0a-d144-41f3-becb-126b9834692a/resourceGroups/MSTTKubernetes/providers/Microsoft.ContainerRegistry/registries/IbmKeTTKubernetesACR"}'
    dockerComposeFile: 'docker-compose.yml'
    dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
    action: 'Build services'
    additionalImageTags: '$(Build.BuildId)'

- task: DockerCompose@0
  displayName: 'Push services'
  inputs:
    azureSubscription: Azure
    azureContainerRegistry: '{"loginServer":"ibmkettkubernetesacr.azurecr.io", "id" : "/subscriptions/abbfdd0a-d144-41f3-becb-126b9834692a/resourceGroups/MSTTKubernetes/providers/Microsoft.ContainerRegistry/registries/IbmKeTTKubernetesACR"}'
    dockerComposeFile: 'docker-compose.yml'
    dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
    action: 'Push services'
    additionalImageTags: '$(Build.BuildId)'

- task: DockerCompose@0
  displayName: 'Lock services'
  inputs:
    azureSubscription: Azure
    azureContainerRegistry: '{"loginServer":"ibmkettkubernetesacr.azurecr.io", "id" : "/subscriptions/abbfdd0a-d144-41f3-becb-126b9834692a/resourceGroups/MSTTKubernetes/providers/Microsoft.ContainerRegistry/registries/IbmKeTTKubernetesACR"}'
    dockerComposeFile: 'docker-compose.yml'
    dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
    action: 'Lock services'

- task: CopyFiles@2
  displayName: 'Copy Files'
  inputs:
    Contents: |    
     **/helm/**
     
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    ArtifactName: deploy

